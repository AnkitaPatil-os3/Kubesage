import { App } from 'vue';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modalTitle: {
            type: import("vue").PropType<string>;
            default: string;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: undefined;
        };
        width: {
            type: import("vue").PropType<string>;
            default: string;
        };
        height: {
            type: import("vue").PropType<string>;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        onClose: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        showAdjust: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isFullscreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onAdjust: {
            type: import("vue").PropType<(val: boolean) => void>;
            default: undefined;
        };
        class: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: undefined;
        };
        showMask: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        insert: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        language: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: undefined;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
    }>> & {
        onOnClose?: ((...args: any[]) => any) | undefined;
        onOnClick?: ((...args: any[]) => any) | undefined;
        onOnAdjust?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("onClick" | "onClose" | "onAdjust")[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modalTitle: {
            type: import("vue").PropType<string>;
            default: string;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: undefined;
        };
        width: {
            type: import("vue").PropType<string>;
            default: string;
        };
        height: {
            type: import("vue").PropType<string>;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        onClose: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        showAdjust: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isFullscreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onAdjust: {
            type: import("vue").PropType<(val: boolean) => void>;
            default: undefined;
        };
        class: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: undefined;
        };
        showMask: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        insert: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        language: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: undefined;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
    }>> & {
        onOnClose?: ((...args: any[]) => any) | undefined;
        onOnClick?: ((...args: any[]) => any) | undefined;
        onOnAdjust?: ((...args: any[]) => any) | undefined;
    }, {
        title: string;
        class: string;
        style: string | import("vue").CSSProperties;
        onClick: () => void;
        insert: () => void;
        language: string;
        theme: import("..").Themes;
        previewTheme: string;
        codeTheme: string;
        visible: boolean;
        height: string;
        width: string;
        onClose: () => void;
        showAdjust: boolean;
        isFullscreen: boolean;
        onAdjust: (val: boolean) => void;
        showMask: boolean;
        trigger: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        modalTitle: string;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        modalTitle: {
            type: import("vue").PropType<string>;
            default: string;
        };
        visible: {
            type: import("vue").PropType<boolean>;
            default: undefined;
        };
        width: {
            type: import("vue").PropType<string>;
            default: string;
        };
        height: {
            type: import("vue").PropType<string>;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        onClose: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        showAdjust: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        isFullscreen: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        onAdjust: {
            type: import("vue").PropType<(val: boolean) => void>;
            default: undefined;
        };
        class: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        style: {
            type: import("vue").PropType<string | import("vue").CSSProperties>;
            default: undefined;
        };
        showMask: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        insert: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        language: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: undefined;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
    }>> & {
        onOnClose?: ((...args: any[]) => any) | undefined;
        onOnClick?: ((...args: any[]) => any) | undefined;
        onOnAdjust?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, {
        title: string;
        class: string;
        style: string | import("vue").CSSProperties;
        onClick: () => void;
        insert: () => void;
        language: string;
        theme: import("..").Themes;
        previewTheme: string;
        codeTheme: string;
        visible: boolean;
        height: string;
        width: string;
        onClose: () => void;
        showAdjust: boolean;
        isFullscreen: boolean;
        onAdjust: (val: boolean) => void;
        showMask: boolean;
        trigger: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
        modalTitle: string;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<string>;
        default: string;
    };
    modalTitle: {
        type: import("vue").PropType<string>;
        default: string;
    };
    visible: {
        type: import("vue").PropType<boolean>;
        default: undefined;
    };
    width: {
        type: import("vue").PropType<string>;
        default: string;
    };
    height: {
        type: import("vue").PropType<string>;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default: undefined;
    };
    onClick: {
        type: import("vue").PropType<() => void>;
        default: undefined;
    };
    onClose: {
        type: import("vue").PropType<() => void>;
        default: undefined;
    };
    showAdjust: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    isFullscreen: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    onAdjust: {
        type: import("vue").PropType<(val: boolean) => void>;
        default: undefined;
    };
    class: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    style: {
        type: import("vue").PropType<string | import("vue").CSSProperties>;
        default: undefined;
    };
    showMask: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    insert: {
        type: import("vue").PropType<() => void>;
        default: undefined;
    };
    language: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    theme: {
        type: import("vue").PropType<import("..").Themes>;
        default: undefined;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    codeTheme: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
}>> & {
    onOnClose?: ((...args: any[]) => any) | undefined;
    onOnClick?: ((...args: any[]) => any) | undefined;
    onOnAdjust?: ((...args: any[]) => any) | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("onClick" | "onClose" | "onAdjust")[], "onClick" | "onClose" | "onAdjust", {
    title: string;
    class: string;
    style: string | import("vue").CSSProperties;
    onClick: () => void;
    insert: () => void;
    language: string;
    theme: import("..").Themes;
    previewTheme: string;
    codeTheme: string;
    visible: boolean;
    height: string;
    width: string;
    onClose: () => void;
    showAdjust: boolean;
    isFullscreen: boolean;
    onAdjust: (val: boolean) => void;
    showMask: boolean;
    trigger: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    modalTitle: string;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
