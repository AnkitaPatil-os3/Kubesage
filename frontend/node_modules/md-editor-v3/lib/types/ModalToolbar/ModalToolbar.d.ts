import { PropType, ExtractPropTypes, VNode, CSSProperties } from 'vue';
import { Themes } from '../MdEditor/type';
declare const _default: import("vue").DefineComponent<{
    title: {
        type: PropType<string>;
        default: string;
    };
    modalTitle: {
        type: PropType<string>;
        default: string;
    };
    visible: {
        type: PropType<boolean>;
        default: undefined;
    };
    width: {
        type: PropType<string>;
        default: string;
    };
    height: {
        type: PropType<string>;
        default: string;
    };
    trigger: {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default: undefined;
    };
    onClick: {
        type: PropType<() => void>;
        default: undefined;
    };
    onClose: {
        type: PropType<() => void>;
        default: undefined;
    };
    /**
     * 显示全屏按钮
     */
    showAdjust: {
        type: PropType<boolean>;
        default: boolean;
    };
    isFullscreen: {
        type: PropType<boolean>;
        default: boolean;
    };
    onAdjust: {
        type: PropType<(val: boolean) => void>;
        default: undefined;
    };
    class: {
        type: PropType<string>;
        default: undefined;
    };
    style: {
        type: PropType<string | CSSProperties>;
        default: undefined;
    };
    showMask: {
        type: PropType<boolean>;
        default: boolean;
    };
    /**
     * ==没有意义，仅用于规避克隆组件自动嵌入insert方法时，传入的是该组件而产生的waring
     */
    insert: {
        type: PropType<() => void>;
        default: undefined;
    };
    language: {
        type: PropType<string>;
        default: undefined;
    };
    theme: {
        type: PropType<Themes>;
        default: undefined;
    };
    previewTheme: {
        type: PropType<string>;
        default: undefined;
    };
    codeTheme: {
        type: PropType<string>;
        default: undefined;
    };
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("onClick" | "onClose" | "onAdjust")[], "onClick" | "onClose" | "onAdjust", import("vue").PublicProps, Readonly<ExtractPropTypes<{
    title: {
        type: PropType<string>;
        default: string;
    };
    modalTitle: {
        type: PropType<string>;
        default: string;
    };
    visible: {
        type: PropType<boolean>;
        default: undefined;
    };
    width: {
        type: PropType<string>;
        default: string;
    };
    height: {
        type: PropType<string>;
        default: string;
    };
    trigger: {
        type: PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default: undefined;
    };
    onClick: {
        type: PropType<() => void>;
        default: undefined;
    };
    onClose: {
        type: PropType<() => void>;
        default: undefined;
    };
    /**
     * 显示全屏按钮
     */
    showAdjust: {
        type: PropType<boolean>;
        default: boolean;
    };
    isFullscreen: {
        type: PropType<boolean>;
        default: boolean;
    };
    onAdjust: {
        type: PropType<(val: boolean) => void>;
        default: undefined;
    };
    class: {
        type: PropType<string>;
        default: undefined;
    };
    style: {
        type: PropType<string | CSSProperties>;
        default: undefined;
    };
    showMask: {
        type: PropType<boolean>;
        default: boolean;
    };
    /**
     * ==没有意义，仅用于规避克隆组件自动嵌入insert方法时，传入的是该组件而产生的waring
     */
    insert: {
        type: PropType<() => void>;
        default: undefined;
    };
    language: {
        type: PropType<string>;
        default: undefined;
    };
    theme: {
        type: PropType<Themes>;
        default: undefined;
    };
    previewTheme: {
        type: PropType<string>;
        default: undefined;
    };
    codeTheme: {
        type: PropType<string>;
        default: undefined;
    };
}>> & {
    onOnClose?: ((...args: any[]) => any) | undefined;
    onOnClick?: ((...args: any[]) => any) | undefined;
    onOnAdjust?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    class: string;
    style: string | CSSProperties;
    onClick: () => void;
    insert: () => void;
    language: string;
    theme: Themes;
    previewTheme: string;
    codeTheme: string;
    visible: boolean;
    height: string;
    width: string;
    onClose: () => void;
    showAdjust: boolean;
    isFullscreen: boolean;
    onAdjust: (val: boolean) => void;
    showMask: boolean;
    trigger: string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    modalTitle: string;
}, {}>;
export default _default;
