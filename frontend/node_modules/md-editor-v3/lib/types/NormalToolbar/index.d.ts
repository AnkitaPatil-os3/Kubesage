import { App } from 'vue';
declare const _default: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<(e: MouseEvent) => void>;
            default: undefined;
        };
        insert: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        language: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: undefined;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
    }>> & {
        onOnClick?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "onClick"[], import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<(e: MouseEvent) => void>;
            default: undefined;
        };
        insert: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        language: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: undefined;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
    }>> & {
        onOnClick?: ((...args: any[]) => any) | undefined;
    }, {
        title: string;
        onClick: (e: MouseEvent) => void;
        insert: () => void;
        language: string;
        theme: import("..").Themes;
        previewTheme: string;
        codeTheme: string;
        trigger: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        title: {
            type: import("vue").PropType<string>;
            default: string;
        };
        trigger: {
            type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>>;
            default: undefined;
        };
        onClick: {
            type: import("vue").PropType<(e: MouseEvent) => void>;
            default: undefined;
        };
        insert: {
            type: import("vue").PropType<() => void>;
            default: undefined;
        };
        language: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        theme: {
            type: import("vue").PropType<import("..").Themes>;
            default: undefined;
        };
        previewTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
        codeTheme: {
            type: import("vue").PropType<string>;
            default: undefined;
        };
    }>> & {
        onOnClick?: ((...args: any[]) => any) | undefined;
    }, () => import("vue/jsx-runtime").JSX.Element, {}, {}, {}, {
        title: string;
        onClick: (e: MouseEvent) => void;
        insert: () => void;
        language: string;
        theme: import("..").Themes;
        previewTheme: string;
        codeTheme: string;
        trigger: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    title: {
        type: import("vue").PropType<string>;
        default: string;
    };
    trigger: {
        type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        default: undefined;
    };
    onClick: {
        type: import("vue").PropType<(e: MouseEvent) => void>;
        default: undefined;
    };
    insert: {
        type: import("vue").PropType<() => void>;
        default: undefined;
    };
    language: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    theme: {
        type: import("vue").PropType<import("..").Themes>;
        default: undefined;
    };
    previewTheme: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
    codeTheme: {
        type: import("vue").PropType<string>;
        default: undefined;
    };
}>> & {
    onOnClick?: ((...args: any[]) => any) | undefined;
}, () => import("vue/jsx-runtime").JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "onClick"[], "onClick", {
    title: string;
    onClick: (e: MouseEvent) => void;
    insert: () => void;
    language: string;
    theme: import("..").Themes;
    previewTheme: string;
    codeTheme: string;
    trigger: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => App;
};
export default _default;
