from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
from datetime import datetime
import uuid

class RawEvent(BaseModel):
    """
    Represents a raw event received from the monitoring system (e.g., Kubernetes event watcher).
    Structure might vary, so using a flexible dictionary for now.
    """
    event_data: Dict[str, Any] = Field(..., description="The raw event payload")
    received_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the event was received")

class Incident(BaseModel):
    """
    Represents a structured incident derived from one or more RawEvents.
    """
    incident_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique identifier for the incident")
    affected_resource: Dict[str, str] = Field(..., description="Details of the affected resource (e.g., {'kind': 'Pod', 'name': 'my-pod', 'namespace': 'default'})")
    failure_type: str = Field(..., description="Categorized type of failure (e.g., 'CrashLoopBackOff', 'ResourcePressure', 'ConfigDrift')")
    description: str = Field(..., description="Detailed description of the incident")
    severity: str = Field(default="medium", description="Severity level (e.g., 'low', 'medium', 'high', 'critical')")
    raw_events: List[RawEvent] = Field(default_factory=list, description="List of raw events contributing to this incident")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the incident was created")
    status: str = Field(default="open", description="Current status (e.g., 'open', 'investigating', 'remediating', 'resolved', 'failed')")

class Action(BaseModel):
    """
    Represents a single step in a remediation plan.
    """
    action_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique identifier for the action")
    executor: str = Field(..., description="The executor responsible for this action (e.g., 'kubectl', 'argocd', 'custom_script')")
    command: str = Field(..., description="The specific command or operation to execute")
    parameters: Dict[str, Any] = Field(default_factory=dict, description="Parameters for the command")
    description: Optional[str] = Field(None, description="Human-readable description of the action")

class Plan(BaseModel):
    """
    Represents a remediation plan generated by the Reasoner Agent.
    """
    plan_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique identifier for the plan")
    incident_id: str = Field(..., description="The ID of the incident this plan addresses")
    actions: List[Action] = Field(..., description="Sequence of actions to remediate the incident")
    created_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp when the plan was created")

class ExecutionResult(BaseModel):
    """
    Represents the result of executing a remediation plan or a single action.
    """
    plan_id: Optional[str] = Field(None, description="ID of the plan executed (if applicable)")
    action_id: Optional[str] = Field(None, description="ID of the action executed (if applicable)")
    status: str = Field(..., description="Execution status ('success', 'failure', 'pending')")
    output: Optional[str] = Field(None, description="Standard output from the execution")
    error: Optional[str] = Field(None, description="Error output or message from the execution")
    executed_at: datetime = Field(default_factory=datetime.utcnow, description="Timestamp of execution completion")
